// Generated by gencpp from file robot_shared_control/FootOutputMsg.msg
// DO NOT EDIT!


#ifndef ROBOT_SHARED_CONTROL_MESSAGE_FOOTOUTPUTMSG_H
#define ROBOT_SHARED_CONTROL_MESSAGE_FOOTOUTPUTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_shared_control
{
template <class ContainerAllocator>
struct FootOutputMsg_
{
  typedef FootOutputMsg_<ContainerAllocator> Type;

  FootOutputMsg_()
    : x(0.0)
    , y(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)
    , Fx(0.0)
    , Fy(0.0)
    , Tphi(0.0)
    , Ttheta(0.0)
    , Tpsi(0.0)
    , state(0)  {
    }
  FootOutputMsg_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)
    , Fx(0.0)
    , Fy(0.0)
    , Tphi(0.0)
    , Ttheta(0.0)
    , Tpsi(0.0)
    , state(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _phi_type;
  _phi_type phi;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _psi_type;
  _psi_type psi;

   typedef float _Fx_type;
  _Fx_type Fx;

   typedef float _Fy_type;
  _Fy_type Fy;

   typedef float _Tphi_type;
  _Tphi_type Tphi;

   typedef float _Ttheta_type;
  _Ttheta_type Ttheta;

   typedef float _Tpsi_type;
  _Tpsi_type Tpsi;

   typedef int16_t _state_type;
  _state_type state;




  typedef boost::shared_ptr< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FootOutputMsg_

typedef ::robot_shared_control::FootOutputMsg_<std::allocator<void> > FootOutputMsg;

typedef boost::shared_ptr< ::robot_shared_control::FootOutputMsg > FootOutputMsgPtr;
typedef boost::shared_ptr< ::robot_shared_control::FootOutputMsg const> FootOutputMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_shared_control::FootOutputMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_shared_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'robot_shared_control': ['/home/walid/catkin_ws/src/robot_shared_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f7a23844c96aae47b26e29ed7083664";
  }

  static const char* value(const ::robot_shared_control::FootOutputMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f7a23844c96aae4ULL;
  static const uint64_t static_value2 = 0x7b26e29ed7083664ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_shared_control/FootOutputMsg";
  }

  static const char* value(const ::robot_shared_control::FootOutputMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# FootOutputMsg.msg\n\
\n\
float32 x\n\
float32 y\n\
float32 phi\n\
float32 theta\n\
float32 psi\n\
\n\
float32 Fx\n\
float32 Fy\n\
float32 Tphi\n\
float32 Ttheta\n\
float32 Tpsi\n\
\n\
int16 state\n\
";
  }

  static const char* value(const ::robot_shared_control::FootOutputMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.psi);
      stream.next(m.Fx);
      stream.next(m.Fy);
      stream.next(m.Tphi);
      stream.next(m.Ttheta);
      stream.next(m.Tpsi);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FootOutputMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_shared_control::FootOutputMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_shared_control::FootOutputMsg_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "Fx: ";
    Printer<float>::stream(s, indent + "  ", v.Fx);
    s << indent << "Fy: ";
    Printer<float>::stream(s, indent + "  ", v.Fy);
    s << indent << "Tphi: ";
    Printer<float>::stream(s, indent + "  ", v.Tphi);
    s << indent << "Ttheta: ";
    Printer<float>::stream(s, indent + "  ", v.Ttheta);
    s << indent << "Tpsi: ";
    Printer<float>::stream(s, indent + "  ", v.Tpsi);
    s << indent << "state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SHARED_CONTROL_MESSAGE_FOOTOUTPUTMSG_H
